using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using MediatR;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using score.Domain.Score.Commands;
using score.Domain.Score.Queries;
using score.Infrastructure;
using Serilog;

namespace score.Controllers
{
    /// <summary>
    /// Controller for calculate final score  of a game 
    /// </summary>
    [Route("api/[controller]")]
    [ApiController]
    public class BowlingScoreController : ControllerBase
    {
        private readonly IMediator mediator;

        public BowlingScoreController(IMediator mediator)
        {            
            this.mediator = mediator ?? throw new ArgumentNullException(nameof(mediator)) ;
        }

        /// <summary>
        /// Calculate score for bowling game to anonymous users
        /// </summary>
        /// <param name="command">String with the rolls sequence</param>
        /// <returns>Object that contains final score of the game</returns>
        /// <response code="200">Object that contains final score of the game</response>
        /// <response code="400">Input string error</response>
        /// <response code="500">Error generated by application</response>
        [HttpPost]
        public async Task<IActionResult> CalculateScore([FromBody] CalculateScoreCommand command)
        {

            if (command is null)
            {
                return BadRequest("Input string error sintax");
            }

            Log.Logger.Information($"Processing Input string : {command.RollsSequence}");
            var response = mediator.Send(command);
            if (response.Result.IsSuccess)
            {
                return Ok(response.Result);
            }
            else
            {
                return StatusCode(500, response.Result);
            }
            
        }

        /// <summary>
        /// Calculate score for bowling game to logged users
        /// </summary>
        /// <param name="command">String with the rolls sequence</param>
        /// <returns>Object that contains final score of the game</returns>
        /// <response code="200">Object that contains final score of the game</response>
        /// <response code="400">Input string error</response>
        /// <response code="401">Invalid token - User not authorized</response>
        /// <response code="500">Error generated by application</response>
        [HttpPost("secure")]
        [ServiceFilter(typeof(JwtActionFilter))]
        public async Task<IActionResult> CalculateUser([FromBody] CalculateScoreCommand command)
        {

            if (command is null)
            {
                return BadRequest("Input string error sintax");
            }

            Log.Logger.Information($"Processing Input string : {command.RollsSequence}");
            var response = mediator.Send(command);
            if (response.Result.IsSuccess)
            {
                return Ok(response.Result);
            }
            else
            {
                return StatusCode(500, response.Result);
            }

        }

        /// <summary>
        /// List with the best rated games (Logged Users)
        /// </summary>
        /// <param name="command">Numeber of rows returned</param>
        /// <returns>List of games with input string sequence and final score</returns>
        /// <response code="200">List of games with input string sequence and final score</response>
        /// <response code="400">Input string error</response>
        /// <response code="401">Invalid token - User not authorized</response>
        /// <response code="500">Error generated by application</response>
        [HttpGet("secure/TopGames")]
        [ServiceFilter(typeof(JwtActionFilter))]
        public async Task<IActionResult> GetTopGames([FromQuery] GetTopGamesQuery query )
        {

            if (query is null)
            {
                return BadRequest("Input string error sintax");
            }

            Log.Logger.Information($"Processing Top List Games");
            var response = mediator.Send(query);
            if (response.Result.IsSuccess)
            {
                return Ok(response.Result.Data);
            }
            else
            {
                return StatusCode(500, response.Result);
            }

        }

    }
}
